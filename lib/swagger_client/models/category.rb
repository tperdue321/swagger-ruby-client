=begin
#Smart Data Management

#RESTful API that can be used to access Kannegiesser's master data back end.

OpenAPI spec version: 0.4.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient
  # Category Model
  class Category
    # General-purpose alphanumeric unique identifier.
    attr_accessor :id

    # Full textual description including titles, the business entity or the like.
    attr_accessor :name

    # Short textual description that might be used for displaying purposes (e.g., shop floor applications).
    attr_accessor :short_name

    # Foreground color that might be used for displaying purposes (e.g., shop floor applications).
    attr_accessor :foreground_color_html

    # Background color that might be used for displaying purposes (e.g., shop floor applications).
    attr_accessor :background_color_html

    attr_accessor :key_values

    attr_accessor :groupings

    # An automatic generated unique identifier used for internal purposes like faster sorting or filtering.
    attr_accessor :auto_id

    # Minimum weight in gram (g).
    attr_accessor :min_weight

    # Maximum weight in gram (g).
    attr_accessor :max_weight

    # Target weight in gram (g).
    attr_accessor :target_weight

    # A description, describing how and where to use that category.
    attr_accessor :description


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'short_name' => :'shortName',
        :'foreground_color_html' => :'foregroundColorHtml',
        :'background_color_html' => :'backgroundColorHtml',
        :'key_values' => :'keyValues',
        :'groupings' => :'groupings',
        :'auto_id' => :'autoId',
        :'min_weight' => :'minWeight',
        :'max_weight' => :'maxWeight',
        :'target_weight' => :'targetWeight',
        :'description' => :'description'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'short_name' => :'String',
        :'foreground_color_html' => :'String',
        :'background_color_html' => :'String',
        :'key_values' => :'KeyValues',
        :'groupings' => :'Array<String>',
        :'auto_id' => :'Integer',
        :'min_weight' => :'Float',
        :'max_weight' => :'Float',
        :'target_weight' => :'Float',
        :'description' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'shortName')
        self.short_name = attributes[:'shortName']
      end

      if attributes.has_key?(:'foregroundColorHtml')
        self.foreground_color_html = attributes[:'foregroundColorHtml']
      end

      if attributes.has_key?(:'backgroundColorHtml')
        self.background_color_html = attributes[:'backgroundColorHtml']
      end

      if attributes.has_key?(:'keyValues')
        self.key_values = attributes[:'keyValues']
      end

      if attributes.has_key?(:'groupings')
        if (value = attributes[:'groupings']).is_a?(Array)
          self.groupings = value
        end
      end

      if attributes.has_key?(:'autoId')
        self.auto_id = attributes[:'autoId']
      end

      if attributes.has_key?(:'minWeight')
        self.min_weight = attributes[:'minWeight']
      end

      if attributes.has_key?(:'maxWeight')
        self.max_weight = attributes[:'maxWeight']
      end

      if attributes.has_key?(:'targetWeight')
        self.target_weight = attributes[:'targetWeight']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @id.to_s.length > 11
        invalid_properties.push("invalid value for 'id', the character length must be smaller than or equal to 11.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @name.to_s.length > 255
        invalid_properties.push("invalid value for 'name', the character length must be smaller than or equal to 255.")
      end

      if !@short_name.nil? && @short_name.to_s.length > 30
        invalid_properties.push("invalid value for 'short_name', the character length must be smaller than or equal to 30.")
      end

      if !@foreground_color_html.nil? && @foreground_color_html.to_s.length > 7
        invalid_properties.push("invalid value for 'foreground_color_html', the character length must be smaller than or equal to 7.")
      end

      if !@foreground_color_html.nil? && @foreground_color_html !~ Regexp.new(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
        invalid_properties.push("invalid value for 'foreground_color_html', must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.")
      end

      if !@background_color_html.nil? && @background_color_html.to_s.length > 7
        invalid_properties.push("invalid value for 'background_color_html', the character length must be smaller than or equal to 7.")
      end

      if !@background_color_html.nil? && @background_color_html !~ Regexp.new(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
        invalid_properties.push("invalid value for 'background_color_html', must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.")
      end

      if !@description.nil? && @description.to_s.length > 511
        invalid_properties.push("invalid value for 'description', the character length must be smaller than or equal to 511.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @id.to_s.length > 11
      return false if @name.nil?
      return false if @name.to_s.length > 255
      return false if !@short_name.nil? && @short_name.to_s.length > 30
      return false if !@foreground_color_html.nil? && @foreground_color_html.to_s.length > 7
      return false if !@foreground_color_html.nil? && @foreground_color_html !~ Regexp.new(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
      return false if !@background_color_html.nil? && @background_color_html.to_s.length > 7
      return false if !@background_color_html.nil? && @background_color_html !~ Regexp.new(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
      return false if !@description.nil? && @description.to_s.length > 511
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, "id cannot be nil"
      end

      if id.to_s.length > 11
        fail ArgumentError, "invalid value for 'id', the character length must be smaller than or equal to 11."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, "name cannot be nil"
      end

      if name.to_s.length > 255
        fail ArgumentError, "invalid value for 'name', the character length must be smaller than or equal to 255."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] short_name Value to be assigned
    def short_name=(short_name)

      if !short_name.nil? && short_name.to_s.length > 30
        fail ArgumentError, "invalid value for 'short_name', the character length must be smaller than or equal to 30."
      end

      @short_name = short_name
    end

    # Custom attribute writer method with validation
    # @param [Object] foreground_color_html Value to be assigned
    def foreground_color_html=(foreground_color_html)

      if !foreground_color_html.nil? && foreground_color_html.to_s.length > 7
        fail ArgumentError, "invalid value for 'foreground_color_html', the character length must be smaller than or equal to 7."
      end

      if !foreground_color_html.nil? && foreground_color_html !~ Regexp.new(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
        fail ArgumentError, "invalid value for 'foreground_color_html', must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/."
      end

      @foreground_color_html = foreground_color_html
    end

    # Custom attribute writer method with validation
    # @param [Object] background_color_html Value to be assigned
    def background_color_html=(background_color_html)

      if !background_color_html.nil? && background_color_html.to_s.length > 7
        fail ArgumentError, "invalid value for 'background_color_html', the character length must be smaller than or equal to 7."
      end

      if !background_color_html.nil? && background_color_html !~ Regexp.new(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
        fail ArgumentError, "invalid value for 'background_color_html', must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/."
      end

      @background_color_html = background_color_html
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)

      if !description.nil? && description.to_s.length > 511
        fail ArgumentError, "invalid value for 'description', the character length must be smaller than or equal to 511."
      end

      @description = description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          short_name == o.short_name &&
          foreground_color_html == o.foreground_color_html &&
          background_color_html == o.background_color_html &&
          key_values == o.key_values &&
          groupings == o.groupings &&
          auto_id == o.auto_id &&
          min_weight == o.min_weight &&
          max_weight == o.max_weight &&
          target_weight == o.target_weight &&
          description == o.description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, short_name, foreground_color_html, background_color_html, key_values, groupings, auto_id, min_weight, max_weight, target_weight, description].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
